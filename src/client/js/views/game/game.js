import PerfectNegotiator from '../../common/PerfectNegotiator.js';
import {createSignaling} from '../../../ws/signaling.js';
import {createManualPeer} from '../../../rtc/manualPeer.js';
import {createPeerPN} from '../../../rtc/peerPN.js';

const servers = {
  iceServers: [
    {
      urls: ['stun:stun.l.google.com:19302', 'stun:stun1.l.google.com:19302', 'stun:stun2.l.google.com:19302'],
    },
  ],
};

const room = new URL(location.href).searchParams.get('room') || 'test';
const signaling = createSignaling(room);

uiInit();
log(`[Step4] room=${room} ÏõπÏÜåÏºì Ïó∞Í≤∞ ÏãúÎèÑ`);
await signaling.waitOpen();
log('[Step4] WS Ïó∞Í≤∞Îê®');

let peer = null;
let polite = null;

// ÏÑúÎ≤Ñ 3Îã®Í≥Ñ Íµ¨ÌòÑÏùÄ Îì§Ïñ¥Ïò§ÏûêÎßàÏûê joined/peer-join Îì±ÏùÑ ÎçòÏßëÎãàÎã§.
// Ïó¨Í∏∞ÏÑúÎäî joinedÍ∞Ä Ïò§Î©¥ peer Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±Îßå Ìï¥ÎëêÍ≥†,
// Ïù¥ÌõÑ, 'signal' Î©îÏãúÏßÄÎ•º Î∞õÏúºÎ©¥ peer.handleSignal Î°ú ÎÑòÍπÅÎãàÎã§.
signaling.onMessage(async msg => {
  if (msg.type === 'joined') {
    // --- joined ------------------------------------
    polite = !!msg.polite;
    log(`[WS] joined count=${msg.count}, polite=${polite}`);
    if (!peer) peer = createPeerPN({polite, signaling, log});
    // Î∞©Ïóê Ïù¥ÎØ∏ 2Î™ÖÏù∏ ÏÉÅÌÉúÎ°ú Ìï©Î•òÌñàÎã§Î©¥(ÎÇ¥Í∞Ä Îëê Î≤àÏß∏) -> Î∞îÎ°ú ÌÇ•
    if (msg.count === 2) {
      peer.ensureNegotiationKick?.();
    }
  } else if (msg.type === 'peer-join') {
    // --- peer-join ---------------------------------
    log(`[WS] peer-join count=${msg.count}`);
    if (!peer && polite !== null) peer = createPeerPN({polite, signaling, log});
    // ÏÉÅÎåÄÍ∞Ä 'ÏßÄÍ∏à' Îì§Ïñ¥ÏôîÎã§Î©¥ -> Ïù¥ ÌÉÄÏù¥Î∞çÏóê ÌÇ•
    peer.ensureNegotiationKick?.();
  } else if (msg.type === 'relay' && msg.data?.type === 'signal') {
    // --- relay -------------------------------------
    if (!peer && polite !== null) peer = createPeerPN({polite, signaling, log});
    await peer.handleSignal(msg.data.data);
  } else if (msg.type === 'peer-leave') {
    // --- peer-leave --------------------------------
    log(`[WS] peer-leave count=${msg.count}`);
    // ÏÉÅÎåÄÍ∞Ä Îñ†ÎÇ¨Îã§Î©¥: ÎÇ¥ Ï™Ω RTCPeerConnectionÏùÑ Ï†ïÎ¶¨ÌïòÍ≥† "ÏÉà Ïó∞Í≤∞ Î∞õÏùÑ Ï§ÄÎπÑ" ÏÉÅÌÉúÎ°ú Ï†ÑÌôò
    try {
      peer?.close();
    } catch {}
    peer = null;
    // Ïù¥Ï†ú Î∞©Ïóê "ÎÇòÎßå" ÎÇ®ÏïòÏúºÎØÄÎ°ú, Îã§Ïùå ÏÉÅÎåÄÍ∞Ä Îì§Ïñ¥Ïò§Î©¥ ÎÇ¥Í∞Ä impoliteÍ∞Ä Ïñ¥Ïñ¥ÎêòÏñ¥ Ï±ÑÎÑêÏùÑ Î®ºÏ†Ä ÎßåÎì§Ïñ¥Ïïº Ìï®
    polite = false;
    // ÏÉà ÌîºÏñ¥Î•º ÎØ∏Î¶¨ ÎßåÎì§Ïñ¥ ÎëîÎã§(ÏÉÅÎåÄÍ∞Ä Îì§Ïñ¥Ïò§Î©¥ Ï¶âÏãú ÌÇ• Í∞ÄÎä•)
    if (polite !== null) {
      peer = createPeerPN({polite, signaling, log});
      // Ïó¨Í∏∞ÏÑúÎäî ÏïÑÏßÅ eensureNegotiationKickÎ•º Ìò∏Ï∂úÌïòÏßÄ ÏïäÏùå
      // -> ÏÉÅÎåÄÍ∞Ä Îì§Ïñ¥ÏôÄ 'peer-join'ÏùÑ Î∞úÏÉùÏãúÌÇ¨ Îïå Ï¶âÏãú ÌÇ•
    }
  }
});

// --- UI ---
function uiInit() {
  const wrap = document.createElement('div');
  wrap.style.margin = '12px 0';
  const btnCall = document.createElement('button');
  btnCall.textContent = 'üìû Call (offer ÏãúÏûë)';
  const input = document.createElement('input');
  input.placeholder = 'Î©îÏãúÏßÄ';
  const btnSend = document.createElement('button');
  btnSend.textContent = 'Send';
  const btnClear = document.createElement('button');
  btnClear.textContent = 'Clear';
  btnClear.style.width = '100%';
  btnClear.style.padding = '6px';

  btnCall.onclick = () => {
    log('ÏßÄÍ∏à Îã®Í≥ÑÏóêÏÑúÎäî Call Î≤ÑÌäºÏù¥ ÎèôÏûëÌïòÏßÄ ÏïäÏäµÎãàÎã§. (Îã§Ïùå Îã®Í≥ÑÏóêÏÑú ÏûêÎèô ÌòëÏÉÅÏúºÎ°ú ÎåÄÏ≤¥)');
  };
  btnSend.onclick = () => {
    if (!peer) return;
    const text = input.value.trim();
    if (!text) return;
    peer.send(text);
    log(`[dc] send: ${text}`);
    input.value = '';
  };

  wrap.append(btnCall, document.createTextNode(' '), input, btnSend);
  document.body.appendChild(wrap);
  document.body.appendChild(btnClear);

  // Î°úÍ∑∏ Î∞ïÏä§
  let el = document.getElementById('log');
  if (!el) {
    el = document.createElement('pre');
    el.id = 'log';
    el.style.whiteSpace = 'pre-wrap';
    el.style.background = '#111';
    el.style.color = '#ddd';
    el.style.padding = '12px';
    el.style.height = '260px';
    el.style.overflow = 'auto';
    document.body.appendChild(el);
  }

  btnClear.onclick = () => {
    el.textContent = '';
    el.scrollTop = el.scrollHeight;
  };
}

function log(s) {
  console.log(s);
  const el = document.getElementById('log');
  el.textContent += s + '\n';
  el.scrollTop = el.scrollHeight;
}

/*
const room = new URLSearchParams(location.search).get('room') || 'room1';
const id = (crypto?.randomUUID && crypto.randomUUID()) || String(Math.random());

// ====== WebSocket (ÏãúÍ∑∏ÎÑê) ======
const wsProto = location.protocol === 'https:' ? 'wss' : 'ws';
const ws = new WebSocket(`${wsProto}://${location.hostname}:5000`);
*/
