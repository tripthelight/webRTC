import "../../../scss/common.scss";
// import {Signaling} from '../../../ws/signaling.js';
// import {createManualPeer} from '../../../rtc/manualPeer.js';
// import {createPeer} from '../../../rtc/peerPN.js';
import {scheduleRefresh} from "../../common/refreshScheduler.js"

// ÌäπÏ†ï ÏãúÍ∞Ñ, ÏßÄÏ†ïÌïú ÌöüÏàòÎßåÌÅº Î∏åÎùºÏö∞Ï†Ä ÏÉàÎ°úÍ≥†Ïπ®
scheduleRefresh();

// ----- WebSocket signaling -----
const WS_URL = `${process.env.SOCKET_HOST}:${process.env.RTC_PORT}`;
const ws = new WebSocket(WS_URL);

let myRole = { slot: null, polite: null, isStarter: null };
let pc = null;   // ÎÇ¥ RTCPeerConnection (Ìïú Î≤àÎßå ÎßåÎì†Îã§)
let dc = null;   // ÎÇ¥ DataChannel (StarterÏùº Îïå ÎßåÎì§Í≥†, ÏàòÏã†Ï∏°ÏùÄ ondatachannelÎ°ú Î∞õÏùå)

// STEP 1: ÏïàÏ†ïÏ†ÅÏù∏ clientId + roomId ÌååÏã± + ÌôîÎ©¥ Î°úÍ∑∏
// - ÏïÑÏßÅ ÏÑúÎ≤Ñ/RTC ÏóÜÏùå
// - ÏÉàÎ°úÍ≥†Ïπ®(F5) ÎÇúÌÉÄÌï¥ÎèÑ clientIdÍ∞Ä Î≥ÄÌïòÏßÄ ÏïäÎèÑÎ°ù localStorageÏóê Ï†ÄÏû•

const $log = document.getElementById('log') || (() => {
  const d = document.createElement('div'); d.id = 'log';
  d.style.whiteSpace = 'pre-wrap'; d.style.background = '#f7f7f7';
  d.style.padding = '12px'; d.style.borderRadius = '8px';
  document.body.appendChild(d); return d;
})();

function log(...a){ $log.textContent += a.join(' ') + '\n'; console.log(...a); }

// 1) ÏÉàÎ°úÍ≥†Ïπ®ÏóêÎèÑ Î≥ÄÌïòÏßÄ ÏïäÎäî Í≥†Ï†ï clientId
function getClientId() {
  const k = 'webrtc.clientId';
  let id = localStorage.getItem(k);
  if (!id) {
    id = (crypto.randomUUID?.() || 'cid-' + Math.random().toString(36).slice(2));
    localStorage.setItem(k, id);
  }
  return id;
}

// 2) URLÏùò ?room= Í∞í ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Í∏∞Î≥∏Í∞í 'room1'
function getRoomId() {
  const u = new URL(location.href);
  return u.searchParams.get('room') || 'room1';
}

const clientId = getClientId();
const roomId = getRoomId();

log('üÜî clientId:', clientId);
log('üè† roomId:', roomId);
log('‚úÖ Ï§ÄÎπÑ ÏôÑÎ£å (Îã§Ïùå Îã®Í≥ÑÏóêÏÑú ÏÑúÎ≤Ñ Ïó∞Í≤∞)');

function ensurePC() {
  if (pc) return pc; // Ïù¥ÎØ∏ ÏûàÏúºÎ©¥ Ïû¨ÏÇ¨Ïö©

  // 1) ÏïÑÏ£º Í∏∞Î≥∏ PC ÏÉùÏÑ± (ICE ÏÑúÎ≤Ñ ÏÑ§Ï†ïÏùÄ Îã§Ïùå Îã®Í≥ÑÏóêÏÑú ÌïÑÏöî Ïãú Ï∂îÍ∞Ä)
  pc = new RTCPeerConnection();

  // 2) ÎîîÎ≤ÑÍπÖÏö© Î°úÍ∑∏: Ïó∞Í≤∞ ÏÉÅÌÉú Î≥ÄÌôî Í∞êÏßÄ
  pc.onconnectionstatechange = () => {
    log("pc.connectionState = ", pc.connectionState)
  }

  // 3) ÏõêÍ≤©ÏóêÏÑú DataChannelÏùÑ "Î≥¥ÎÇ¥ÏöîÎ©¥" ÏàòÏã†Ï∏°ÏùÄ Ïó¨Í∏∞ÏÑú Ïû°ÌûôÎãàÎã§.
  pc.ondatachannel = (ev) => {
    dc = ev.channel;
    dc.onopen = () => log("dataChannel(open) - ÏàòÏã†Ï∏°");
    dc.onmessage = (e) => log("recv:", e.data);
    log("ondatachannel: Ï±ÑÎÑêÏùÑ ÏàòÏã†ÌñàÏäµÎãàÎã§.(ÏïÑÏßÅ ÏãúÍ∑∏ÎÑêÎßÅ ÏóÜÏùå)")
  }

  // 4) ÌòëÏÉÅ ÌïÑÏöî Ïù¥Î≤§Ìä∏ - ** Îã§Ïùå Îã®Í≥ÑÏóêÏÑú ** offer/answer Î°úÏßÅÏùÑ Î∂ôÏûÖÎãàÎã§.
  pc.onnegotiationneeded = () => {
    log("onnegotiationneeded (Îã§Ïùå Îã®Í≥ÑÏóêÏÑú Ï≤òÎ¶¨Ìï† ÏòàÏ†ï)")
  }

  return pc;
}

// Í∏∞Ï°¥ open Ìï∏Îì§Îü¨Î•º 'Ï°∞Í∏à' ÌôïÏû•: Ï†ëÏÜçÎêòÎ©¥ join Ï†ÑÏÜ° 1Ï§Ñ Ï∂îÍ∞Ä
ws.addEventListener('open', () => {
  log('üîó signaling connected');
  ws.send(JSON.stringify({ type: 'join', roomId, clientId })); // ‚Üê Ï∂îÍ∞Ä 1Ï§Ñ
});

// --- Ï∂îÍ∞Ä: ÏÑúÎ≤Ñ ÏùëÎãµ(join Í≤∞Í≥º)Îßå Ï≤òÎ¶¨ ---
ws.addEventListener('message', (ev) => {
  const msg = JSON.parse(ev.data);

  if (msg.type === 'joined') {
    // waiting=trueÎ©¥ ÎÇ¥Í∞Ä AÎ°ú Î®ºÏ†Ä ÏïâÏïÑ ÏÉÅÎåÄ ÎåÄÍ∏∞ Ï§ë
    log(`ü™ë ÏûêÎ¶¨ Î∞∞Ï†ï: slot=${msg.slot}, ÎåÄÍ∏∞Ï§ë=${msg.waiting}`);
  } else if (msg.type === 'full') {
    log('üö´ Î∞©Ïù¥ Í∞ÄÎìù Ï∞ºÏäµÎãàÎã§(2Ïù∏ Ï†ÑÏö©).');
  } else if (msg.type === 'role') {
    myRole = msg.you;
    log(`üé≠ Ïó≠Ìï† ÌôïÏ†ï ‚Üí slot=${myRole.slot}, polite=${myRole.polite}, isStarter=${myRole.isStarter}`);

    // 1) ÎÇ¥ RTCPeerConnectionÏùÑ Ï§ÄÎπÑ(ÏóÜÏúºÎ©¥ ÏÉùÏÑ±)
    ensurePC();

    // 2) ÎÇ¥Í∞Ä StarterÎùºÎ©¥, "Î≥¥ÎÇ¥Îäî Ï™Ω" dataChannelÏùÑ ÏßÄÍ∏à 'ÎßåÎì§Í∏∞Îßå' Ìï©ÎãàÎã§.
    //    (Ïã§Ï†ú Ïó∞Í≤∞ÏùÄ Îã§Ïùå Îã®Í≥ÑÏùò offer/answer ÏãúÍ∑∏ÎÑêÎßÅÏù¥ Î∂ôÏùÄ Îí§ Ïó¥Î¶ΩÎãàÎã§)
    if (myRole.isStarter) {
      dc = pc.createDataChannel('game'); // Ï±ÑÎÑê Ïù¥Î¶Ñ 'game' (ÏûÑÏùò)
      dc.onopen = () => log('üì° dataChannel(open) ‚Äî ÏãúÏûëÏ∏°');
      dc.onmessage = (e) => log('üì® recv:', e.data);
      log('üß™ StarterÏù¥ÎØÄÎ°ú dataChannelÏùÑ ÏÉùÏÑ±Îßå ÌñàÏäµÎãàÎã§. (ÏïÑÏßÅ SDP Ï†ÑÏÜ° ÏóÜÏùå)');
    }
  }
});

ws.addEventListener('close', () => log('üîå signaling closed'));
ws.addEventListener('error', (e) => log('‚ö†Ô∏è signaling error', e?.message || e.type));
